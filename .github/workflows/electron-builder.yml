name: Build
on:
  push:
    # tags:
    #   - 'v*'

jobs:
  create_release:
    runs-on: ubuntu-latest
    outputs:
      release_upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_name: ${{ steps.get_source_tag.outputs.SOURCE_TAG }}
    steps:
    - name: Get the Source Tag
      id: get_source_tag
      run: echo ::set-output name=SOURCE_TAG::${GITHUB_REF#refs/tags/}
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_source_tag.outputs.SOURCE_TAG }}
        release_name: Release ${{ steps.get_source_tag.outputs.SOURCE_TAG }}
        draft: false
        prerelease: true

  # build_on_linux:
  #   runs-on: ubuntu-latest
  #   needs: create_release
  #   steps:
  #   - uses: actions/checkout@v2
  #   - uses: actions/setup-node@master
  #     with:
  #       node-version: 14
  #   - name: Install dependencies
  #     run: npm cache --force clean && npm install --force
  #   - name: Build executables
  #     run: npm run make

  #   - name: Compress and package executables
  #     run: ./scripts/package_linux_executables.sh

  #   - name: Upload linux deb artefact
  #     uses: actions/upload-release-asset@v1
  #     env:
  #       GITHUB_TOKEN: ${{ github.token }}
  #     with:
  #       upload_url: ${{ needs.create_release.outputs.release_upload_url }}
  #       asset_path: ./out/linux_executables/point-dashboard-deb.tar.gz
  #       asset_name: point-${{ needs.create_release.outputs.release_name }}-Linux-Debian-Ubuntu.tar.gz
  #       asset_content_type: application/gzip
  #   - name: Upload linux rpm artefact
  #     uses: actions/upload-release-asset@v1
  #     env:
  #       GITHUB_TOKEN: ${{ github.token }}
  #     with:
  #       upload_url: ${{ needs.create_release.outputs.release_upload_url }}
  #       asset_path: ./out/linux_executables/point-dashboard-rpm.tar.gz
  #       asset_name: point-${{ needs.create_release.outputs.release_name }}-Linux-RPM-Centos-Fedora.tar.gz
  #       asset_content_type: application/gzip

  # build_on_mac:
  #   runs-on: macos-latest
  #   needs: create_release
  #   steps:
  #   - name: Install the Apple certificate and provisioning profile
  #     env:
  #       BUILD_CERTIFICATE_BASE64: ${{ secrets.APPLE_DEV_ID_APPLICATION_CERTIFICATE_P12_BASE64 }}
  #       P12_PASSWORD: ${{ secrets.APPLE_DEV_ID_DECRYPTION_PASSWORD }}
  #       BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.APPLE_DEV_ID_PROFILE }}
  #       KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
  #     run: |
  #       # create variables
  #       CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
  #       PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
  #       KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

  #       # import certificate and provisioning profile from secrets
  #       echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
  #       echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

  #       # create temporary keychain
  #       security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
  #       security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
  #       security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

  #       # import certificate to keychain
  #       security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
  #       security list-keychain -d user -s $KEYCHAIN_PATH

  #       # apply provisioning profile
  #       mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
  #       cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

  #   - name: list identities
  #     run: echo $(security find-identity)
  #   - uses: actions/checkout@v2
  #   - uses: actions/setup-node@master
  #     with:
  #       node-version: 14
  #   - name: Install dependencies
  #     run: npm install
  #   - name: Build Installer dist
  #     run: npm run make
  #     env:
  #       APPLE_IDENTITY: ${{secrets.APPLE_DEV_IDENTITY}}
  #       APPLE_ID: ${{secrets.APPLE_DEV_ID}}
  #       APPLE_DEV_ID_APP_SPECIFIC_PASSWORD: ${{secrets.APPLE_DEV_ID_APP_SPECIFIC_PASSWORD}}
  #       DEBUG: electron
  #   - name: Check sign app
  #     run: echo $(codesign -dvvv ./out/point-darwin-x64/point.app)

  #   - name: Build Installer
  #     run: npm run create-installer-mac
  #   - name: Compress and package executables
  #     run: ./scripts/package_macos_executables.sh
  #   # - name: Upload macos executable
  #   #   uses: actions/upload-release-asset@v1
  #   #   env:
  #   #     GITHUB_TOKEN: ${{ github.token }}
  #   #   with:
  #   #     upload_url: ${{ needs.create_release.outputs.release_upload_url }}
  #   #     asset_path: ./out/mac_executables/point-dashboard.tar.gz
  #   #     asset_name: point-${{ needs.create_release.outputs.release_name }}-MacOS-portable.tar.gz
  #   #     asset_content_type: application/gzip
  #   - name: Check sign dmg
  #     run: echo $(codesign -dvvv ./out/point.dmg)

  #   - name: Compress and package Installer
  #     run: ./scripts/package_macos_installer.sh
  #   - name: Upload macos installer
  #     uses: actions/upload-release-asset@v1
  #     env:
  #       GITHUB_TOKEN: ${{ github.token }}
  #     with:
  #       upload_url: ${{ needs.create_release.outputs.release_upload_url }}
  #       asset_path: ./out/mac_executables/point-dashboard-dmg.tar.gz
  #       asset_name: point-${{ needs.create_release.outputs.release_name }}-MacOS-installer.tar.gz
  #       asset_content_type: application/gzip
  #   - name: Upload macos zipped app
  #     uses: actions/upload-release-asset@v1
  #     env:
  #       GITHUB_TOKEN: ${{ github.token }}
  #     with:
  #       upload_url: ${{ needs.create_release.outputs.release_upload_url }}
  #       asset_path: ./out/mac_executables/zip/point.zip
  #       asset_name: point-${{ needs.create_release.outputs.release_name }}-MacOS-app.zip
  #       asset_content_type: application/zip

  build_on_win:
    runs-on: windows-latest
    needs: create_release
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@master
    - uses: actions/setup-python@v2
      with:
        node-version: 16
        python-version: '3.11.0-alpha - 3.11.0'
    - name: Add Windows certificate
      id: write_file
      uses: timheuer/base64-to-file@v1
      with:
        fileName: 'win-certificate.pfx'
        encodedString: ${{ secrets.CERTIFICATE_WINDOWS_PFX }}
    - name: Update npm
      run: npm i -g npm
    - name: Install dependencies
      run: npm install --legacy-peer-deps
    - name: config msvs
      run: npm config set msvs_version 2022
    - name: Build executables
      run: npm run make
    - name: Set path for candle and light
      run: echo "C:\Program Files (x86)\WiX Toolset v3.11\bin" >> $GITHUB_PATH
      shell: bash
    - name: Build Installer
      run: npm run create-installer-win
      env:
        WINDOWS_PFX_FILE: ${{ steps.write_file.outputs.filePath }}
        WINDOWS_PFX_PASSWORD: ${{ secrets.WINDOWS_PFX_PASSWORD }}

    # - name: Compress and package executables
    #   run: bash ./scripts/package_win_executables.sh
    # - name: Upload win executable
    #  uses: actions/upload-release-asset@v1
    #   env:
    #     GITHUB_TOKEN: ${{ github.token }}
    #   with:
    #     upload_url: ${{ needs.create_release.outputs.release_upload_url }}
    #     asset_path: ./out/win_executables/point-dashboard.zip
    #     asset_name: point-${{ needs.create_release.outputs.release_name }}-Windows-portable.zip
    #     asset_content_type: application/gzip

    - name: Compress and package installer
      run: bash ./scripts/package_win_installer.sh
    - name: Upload win installer
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ needs.create_release.outputs.release_upload_url }}
        asset_path: ./out/win_executables/pointnetwork-windows_installer.zip
        asset_name: point-${{ needs.create_release.outputs.release_name }}-Windows-installer.zip
        asset_content_type: application/gzip
